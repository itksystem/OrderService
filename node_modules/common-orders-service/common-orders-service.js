// common-orders-service.js

/* SQL Queries */
const SQL = {
  ORDER: {
    SUBSCRIPTIONS : `SELECT   "title", "level", "amount", "description", "currency_char" as "currencyChar", "currency_code" as "currencyCode"
     FROM pa_orders_service.subscription_levels where is_active = true`,
    SUBSCRIPTION_STATUS : `
     SELECT 
     subscription_id as "subscriptionId", 
     expired_at as "expiredAt", level,  
       CASE  
       WHEN deleted_at is null AND (expired_at > now())  THEN true  
       ELSE false END as "isActive" 
     FROM pa_orders_service.subscriptions 
     WHERE user_id = $1 and deleted_at is null
    `,
    SUBSCRIPTION_CREATE: `
     INSERT INTO pa_orders_service.subscriptions 
      (      
       user_id, order_id, level, 
       created_at, 
       updated_at, 
       deleted_at,
       renewal
      ) VALUES (
       $1, $2, $3,
       now(), 
       now(),
       null,
       true
       )    
     RETURNING 
      "subscription_id" as "subscriptionId",
      "order_id" as "orderId",
      "renewal",
      "level",
      "created_at" as "createdAt",      
      "expired_at" as "expiredAt"
    `,

    SUBSCRIPTION_DELETE : `
    UPDATE pa_orders_service.subscriptions 
    SET
      deleted_at = now()
     WHERE user_id = $1 and deleted_at is NULL
     RETURNING *,  EXTRACT(DAY FROM (NOW() - updated_at)) AS left_days
    `,

    SUBSCRIPTION_ACTIVATED : `
    UPDATE pa_orders_service.subscriptions 
    SET      
      expired_at = now() + INTERVAL '1 month',       
      updated_at = now()
     WHERE user_id = $1 and deleted_at is NULL
     RETURNING *
    `,

    SUBSCRIPTION_DEACTIVATED : `
    UPDATE pa_orders_service.subscriptions 
    SET
      deleted_at = now()      
    WHERE user_id = $1 and deleted_at is NULL
    RETURNING *,  EXTRACT(DAY FROM (NOW() - updated_at)) AS left_days
    `,
    

    CREATE: `INSERT INTO pa_orders_service.orders (user_id, reference_id) VALUES ($1, $2) RETURNING * `,
    FIND_BY_USER_AND_REFERENCE: `SELECT * FROM pa_orders_service.orders WHERE user_id = $1 AND reference_id = $2`,
    FIND_BY_USER: `SELECT order_id, status, created_at, updated_at 
      FROM pa_orders_service.orders 
      WHERE user_id = $1 and status = $2       
    order by order_id desc
    `,
    FIND_BY_ORDER_AND_USER: `SELECT order_id, reference_id, status, created_at, updated_at FROM pa_orders_service.orders WHERE order_id = $1 AND user_id = $2`,
    FIND_BY_REFERENCE_AND_USER: `SELECT order_id, status, created_at, updated_at FROM pa_orders_service.orders WHERE reference_id = $1 AND user_id = $2`,
    UPDATE_STATUS: `UPDATE pa_orders_service.orders SET status = $1 WHERE order_id = $2 AND user_id = $3`,
    UPDATE_STATUS_BY_ORDER: `UPDATE pa_orders_service.orders SET status = $1 WHERE order_id = $2`,
  }
};

const MESSAGES = {
  RU: {
    ORDER_CREATION_ERROR: 'Ошибка при создании заказа.',
    ORDER_NOT_FOUND: 'Заказ не найден.',
    ORDER_UPDATE_ERROR: 'Ошибка при обновлении статуса заказа.',
    ORDER_DECLINE_SUCCESS: 'Заказ успешно отменен.',
    ORDER_STATUS_UPDATE_SUCCESS: 'Статус заказа успешно обновлен.',
    ORDER_FETCH_ERROR: 'Ошибка при получении данных о заказе.',
    ORDER_ROLLBACK_ERROR: 'Ошибка при откате операций заказа.',
    ORDER_STATUS_MESSAGE_ERROR: 'Ошибка при отправке статуса заказа.',
    ORDER_WAREHOUSE_DECLINE_ERROR: 'Ошибка при отмене бронирования товара на складе.',
    ORDER_DELIVERY_DECLINE_ERROR: 'Ошибка при отмене бронирования доставки.',
    ORDER_RETURN_TRANSACTION_ERROR: 'Ошибка при выполнении операции возврата средств.',
  },
  EN: {
    ORDER_CREATION_ERROR: 'Error creating order.',
    ORDER_NOT_FOUND: 'Order not found.',
    ORDER_UPDATE_ERROR: 'Error updating order status.',
    ORDER_DECLINE_SUCCESS: 'Order successfully declined.',
    ORDER_STATUS_UPDATE_SUCCESS: 'Order status successfully updated.',
    ORDER_FETCH_ERROR: 'Error fetching order data.',
    ORDER_ROLLBACK_ERROR: 'Error rolling back order operations.',
    ORDER_STATUS_MESSAGE_ERROR: 'Error sending order status.',
    ORDER_WAREHOUSE_DECLINE_ERROR: 'Error canceling warehouse reservation.',
    ORDER_DELIVERY_DECLINE_ERROR: 'Error canceling delivery reservation.',
    ORDER_RETURN_TRANSACTION_ERROR: 'Error executing refund transaction.',
  }
};

/* Экспорт */
module.exports = {
  SQL,
  MESSAGES
};
